import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;


public class main {
	public static void main(String[] args) throws IOException {

		// we expect exactly one argument: the name of the input file
		if (args.length != 1) {
			System.err.println("\n");
			System.err.println("Siple interpreter\n");
			System.err.println("==================\n\n");
			System.err.println("Please givse as input argument a filename\n");
			System.exit(-1);
		}
		String filename = args[0];

		// open the input file
		CharStream input = CharStreams.fromFileName(filename);
		// new ANTLRFileStream (filename); // depricated

		// create a lexer/scanner
		implLexer lex = new implLexer(input);

		// get the stream of tokens from the scanner
		CommonTokenStream tokens = new CommonTokenStream(lex);

		// create a parser
		implParser parser = new implParser(tokens);

		// and parse anything from the grammar for "start"
		ParseTree parseTree = parser.start();

		// Construct an interpreter and run it on the parse tree
		// Interpreter interpreter = new Interpreter();
		Command p = (Command) new AstMaker().visit(parseTree);
		p.eval(new Environment());
	}
}

// We write an interpreter that implements interface
// "implVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Double.

class AstMaker extends AbstractParseTreeVisitor<AST> implements implVisitor<AST> {

	public AST visitStart(implParser.StartContext ctx) {
		Command program = new NOP();
		for (implParser.CommandContext c : ctx.cs)
			program = new Sequence(program, (Command) visit(c));
		return program;
	};

	public AST visitFn(implParser.FnContext ctx) {
		System.out.println("---fn recursive stack started---");
		List<TypeIdentifier> types_params = new ArrayList<TypeIdentifier>();
		for(implParser.TypeContext type: ctx.fnparams().type()) 
		{
			types_params.add((TypeIdentifier)visit(type));
		}
		//to be explicit
		TypeIdentifier ReturnValueFn = (TypeIdentifier)visit(ctx.type());
		TypeIdentifier ParamsIdfsFn = (TypeIdentifier)visit(types_params);
		Expr ExprInsideFn = (Expr)visit(ctx.expr());
		return new Fn(ReturnValueFn,ParamsIdfsFn,ExprInsideFn);
	}

	public AST visitFnparams(implParser.FnparamsContext ctx) {
		faux.error("Function Parameters Cannot return a node in a AST Tree");
		return null;
	}

	public AST visitIntegerType(implParser.IntegerTypeContext ctx) {
		System.out.println("visting integer type, ID: " + ctx.ID().getText());
		return new TypeIdentifier(JavaType.INTTYPE, ctx.ID().getText());
	}

	public AST visitBoolType(implParser.BoolTypeContext ctx) {
		System.out.println("visiting bool type, ID:" + ctx.ID().getText());
		return new TypeIdentifier(JavaType.BOOLTYPE, ctx.ID().getText());
	}

	public AST visitSingleCommand(implParser.SingleCommandContext ctx) {
		return visit(ctx.c);
	}

	public AST visitMultipleCommands(implParser.MultipleCommandsContext ctx) {
		Command program = new NOP();
		for (implParser.CommandContext c : ctx.cs)
			program = new Sequence(program, (Command) visit(c));
		return program;
	}

	public AST visitAssignment(implParser.AssignmentContext ctx) {
		String v = ctx.x.getText();
		Expr e = (Expr) visit(ctx.e);
		return new Assignment(v, e);
	}

	public AST visitOutput(implParser.OutputContext ctx) {
		Expr e = (Expr) visit(ctx.e);
		return new Output(e);
	}

	public AST visitWhileLoop(implParser.WhileLoopContext ctx) {
		Condition c = (Condition) visit(ctx.c);
		Command body = (Command) visit(ctx.p);
		return new While(c, body);
	}

	public AST visitParenthesis(implParser.ParenthesisContext ctx) {
		return visit(ctx.e);
	};

	public AST visitVariable(implParser.VariableContext ctx) {
		return new Variable(ctx.x.getText());
	};

	public AST visitUnaryMinus(implParser.UnaryMinusContext ctx) {
		System.out.println("visiting unaryMinus\te1:" + ctx.e1.toString());
		return new UnaryMinus((Expr) visit(ctx.e1));
	}

	public AST visitMultDiv(implParser.MultDivContext ctx) {
		System.out.println("visiting multDiv");
		String op = ctx.MULTDIVOP().getText();
		return new MultDiv(op, (Expr) visit(ctx.expr(0)), (Expr) visit(ctx.expr(1)));
	}

	public AST visitAddSub(implParser.AddSubContext ctx) {
		System.out.println("visiting addSub ");
		if (ctx.op.getText().equals("+")) {
			return new Add((Expr) visit(ctx.e1), (Expr) visit(ctx.e2));
		}
		return new Sub((Expr) visit(ctx.expr(0)), (Expr) visit(ctx.expr(1)));
	}

	public AST visitConstant(implParser.ConstantContext ctx) {
		return new Constant(Double.parseDouble(ctx.c.getText()));
	};

	public AST visitUnequal(implParser.UnequalContext ctx) {
		Expr v1 = (Expr) visit(ctx.e1);
		Expr v2 = (Expr) visit(ctx.e2);
		return new Unequal(v1, v2);
	}
}
